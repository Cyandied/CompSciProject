import java_cup.runtime.*;

parser code {:
  public void report_error(String message, Object info) {
    System.err.println(message);
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }
:};

terminal            STORE, AS, SEMI, IF, THEN, ELSE, END, THINK, ABOUT, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN;
terminal Integer    NUMBER;
terminal String     VAR;
terminal Boolean    BOOL;

non terminal Expression            expr;
non terminal ArrayList<Expression> expr_list;
non terminal Statement             stm;
non terminal ArrayList<Statement>  stm_list;

/* The precedence defined here would look something like this where the
   lower line always will have higher precedence than the line before it.
*/
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

/*expr_list ::= expr_list expr_part
            | expr_part
            ; */

stm_list  ::= stm
               {:   ArrayList<Statement> lonely_statement = new ArrayList<Statement>();
                    lonely_statement.add(stm);
                    RESULT = lonely_statement;
                    :}
          |    stm_list stm
               {:   stm_list.add(stm);
                    RESULT = stm_list;
                    :}
          ;

stm       ::= STORE expr AS VAR SEMI
                    {:  :}
          |    IF expr THEN stm_list ELSE stm_list END
                    {:  :}
          |    THINK expr ABOUT stm_list END
                    {:  :}
          ;   


expr      ::= expr:e1 PLUS expr:e2
                 {: RESULT = new Addition(e1, e2); :}
            | expr:e1 MINUS expr:e2
                 {: RESULT = Integer.valueOf(e1.intValue() - e2.intValue()); :}
            | expr:e1 TIMES expr:e2
                 {: RESULT = Integer.valueOf(e1.intValue() * e2.intValue()); :}
            | expr:e1 DIVIDE expr:e2
                 {: RESULT = Integer.valueOf(e1.intValue() / e2.intValue()); :}
            | LPAREN expr:e RPAREN
                 {: RESULT = e; :}
            | NUMBER:n
                 {: RESULT = new Number(n); :}
            | VAR:i
                 {: RESULT = i; :}
            ;

